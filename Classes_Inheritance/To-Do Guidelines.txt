Important Commands:

To Do:
- Finish Tic Tac Toe prep videos (left off at stack and heap visualizer)
- Libraries to install on home computer: GCC, make, GDB (debugger)

g++ -o placehholder_name placeholder.cpp (creates executable for code)
g++ *.cpp (compiles all cpp files)
./placeholder.exe (runs executable)

- Set-up GDB | Gnu Debugger
- Enable show line numbers by default
- Watch CString and Array tutortials
- Finish palindrome project

Character arrays:
- C++ frowns upon strings (for some reason), so an array of characters is used instead
- These arrays function like normal arrays and can be iterated through by index
- Character arrays can be printed using cout without index iteration, but the end would require a null character ('\0'), otherwise the cout would continue reading into the memory

Tips/Guidelines:
- Always initialize variables. In C++, wherever variables are stored is not cleared out, meaning the bits that may so happen to be there will be read if there isn't an initial assigned value
- ++[variable] | Adds one and then line executes | [variable]++ | Adds one after line executes
- Above applies to -- as well
- Commenting: "//" or "/*" w/ "*/"
- cin puts a null character ('/0') after the input & cout reads until this null character. 
- cin can overwite the values of multiple input variables since they may (often?) be next to each other in memory (don't think it overrides null characters)
- cin interprets spaces as null characters (is this the right interepretation?), ending the input there
- cin.get is the same as cin, but interprets spaces as their own characters
- C++ never checks for out-of-bounds errors
C/C++ makes a distinction between signed and unsigned varibles. Signed can be positive for negative, unsigned can only be positive
- single and double quotes are different | single: identifies a single character | double: identifies a string literal (can have embedded \0 null characters)
- any variables intialized in loops are only accessible within the loop

Functions:

- C++ functions are only recognized from a top down order, so if called in an earlier function, there will be an error. To circumvent this you can have a function "prototype" of function A before the function B, where you're trying to called function A (function A is written out below function B). Protoype looks like this [variable return type] [function name] (arguments/parameters);
- a called function given values for its arguments will make a copy of those given values for independent use within the function (these copies are called pass by values)
- if you would like to alter the orginal value passed in (not just pass by/make an independent copy), delclare arguments like this: float sampleFunction(int & a), instead of like this: float sampleFuncction(int a)

Pointers & References:

- "*" when declaring = pointer type | in line: dereference (take address and return value) | Lower preccedence than "." or "->"
- "&" = when declaring in functions = "passing by reference"/alter original variable | in line: return memory address of given variable
- Passing in by reference: Altering value & location/address (without the "&", only the value is copied [passing by value])
- "->" | "Arrow" is dereference THEN dot, instead of dot THEN dereference which is the default order | usually used the in the context of arrays/vectors/etc.

Stack vs. Heap:

- Whenever a variable or really anything is declared/created, it is created within stack memory. Everything in stack memory is deleted (automatically calls delete method) after the code within two braces is finished
- Whenever the "new" keyword is used, however,  the memory is allocated to the heap and is accessible between methods (beyond the curly braces in which something was declared/created) 

Vectors & Iterators:

To Do later: Look at casting (forcing the vector to acccept a data type different than the default/original initialized)

Vectors:
- A container of objects of the same element type (int, ptrs, structs, etc.)
- Dynamic arrays (automatic resizing)
- Ordered List with index starting at 0

Iterators:
- Used to iterate through a container, such as a vector
- NOTE: Creates pointers to each of the elements in the container

Structures:

- A set of variables with types defined that together are considered a "structure"

struct Name {

	type name;
	type name;

};

Header Files:

- Used to define commonly used functions and variables, reducing writing complexity of the code itself so not everything has to be manually written out
- Usually used with "#include" statements to insert header files into a C-Language program
- Header Guards: To prevent redefinition errors between individual C++ files (when running them together as one?).
	Start: "#ifndef [header_name]" //Checks if this header has already been defined (by name)
	Next Line: "#define [header_name]" //If pass, then define
	Fill with header declarations
	End: "#endif" //Ends the conditional check
 
Virtual Destructors:

Classes:

- Basically used to define a set of methods/functions within a class
- When implementing a class: [Class_Name]::[Class_Name] //These must be the same to the case
	Every signature type must be unique
- When making/inisitalizing class struccture (header files): class [Class_Name] {}

- Function vs. Method & Fields:
	Methods must operate on an object (set of data)
	Fields: Variables of an object
	Functions can be standalone

- Public: Everyone can use
- Private: Only a particular class can use
- Protected: Only the parent and child can use

Inheritance (Parent & Child):

- A child class is linked to their parent class
- Child Initalization: class [child_name] : public [parent_name] {}

- If a child has more input parameters than its parent, specify which parameter to input the parent value(s)

	Example: child::[child_name](int value, int secondvalue):[parent_name](value)

- A child automatically gets any variables or methods of the parent class, but the child's methods/variables override the parent's if there is any overlap
- Note: A child can be pushed into a vector of the parent type, but if the vector is of the parent type, it will assume the parent values (sometimes?)





Classes and Inheritance
 

Create a media database.

 

Create a database that includes video games, music, and movies.

 

Implementation:

You will have a parent class for all digital media. It should have methods for the fields the child classes have in common.

Video games must have the fields: title, year, publisher, rating.

Music must have the fields: title, artist, year, duration, publisher.

Movies must have the fields: title, director, year, duration, rating. (30 points)

Learn how virtual functions work! That will make your life easier.

You might need to cast the media pointer in the main class to the corresponding child pointer, and therefore use its corresponding method. There is a static cast command in C++ that will allow that.

There should be methods in the child classes that access the fields in that class. For example, video games should have a “getRating()” method.  If necessary, you can create methods that overwrite the parent methods.

 

MAIN METHOD:

In your main class, create a vector containing the parent class. Allow the user to ask for the following information.

ADD:  The user should be able to add each kind of media, including the information in each field. (10 points)

SEARCH:  The user should be able to search for and print objects currently in the media database by searching for the title or the year.  If multiple objects match, list them all. (20 points)

DELETE: The user should be able to delete an item. Use the same functionality as the search method, then have the user confirm whether they want to delete those objects. USE A DESTRUCTOR. (10 points)

Note: By the time you are done, you will have four .h files and five .cpp files.  (One parent class, three child classes, and one main .cpp file.) Also, include a "QUIT" command, too.

Comments! (10 points)

 

Total: 80 points

TURN IN A GITHUB LINK TO YOUR REPOSITORY.

For assignments, make sure you are turning in your repository, rather than the entire pathname to your file. For example, I have a file at:

https://github.com/SunRover/RoverCenter/blob/master/RoverCenter/src/rover/DataTypes.java

(Yes, I know that's a Java file, but the lesson still applies.) However, the repository is whatever is before "blob". If I was turning this in, I would turn in:

https://github.com/SunRover/RoverCenter

or, better yet,

https://github.com/SunRover/RoverCenter.git